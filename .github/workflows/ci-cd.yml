name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: demo-cluster

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install eksctl
      run: |
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin
        eksctl version

    - name: Check if EKS Cluster exists
      id: check_cluster
      run: |
        if eksctl get cluster --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}; then
          echo "exists=true" >> $GITHUB_ENV
        else
          echo "exists=false" >> $GITHUB_ENV
        fi

    - name: Create EKS Cluster
      if: env.exists == 'false'
      run: |
        eksctl create cluster --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }} --managed

    - name: Update kubeconfig and verify connection
      run: |
        aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
        kubectl get nodes

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/requirements.txt
    
    - name: Run tests
      run: |
        cd src
        python -m unittest discover tests
    
    - name: Build Docker image
      run: docker build -t dmolio/item-management-api:${{ github.sha }} src
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    
    - name: Push image to Docker Hub
      run: |
        docker push dmolio/item-management-api:${{ github.sha }}
        docker tag dmolio/item-management-api:${{ github.sha }} dmolio/item-management-api:latest
        docker push dmolio/item-management-api:latest

    - name: Update Kubernetes manifests
      run: |
        sed -i 's|dmolio/item-management-api:.*|dmolio/item-management-api:${{ github.sha }}|' k8s/manifests/deployment.yaml

    - name: Apply Kubernetes manifests
      run: |
        kubectl apply -f k8s/manifests/

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/item-management-api -n default

    - name: Get Load Balancer URL
      run: |
        LB_URL=$(kubectl get svc item-management-api -n default -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        echo "LOAD_BALANCER_URL=$LB_URL" >> $GITHUB_ENV

    - name: Output Load Balancer URL
      run: |
        echo "Your application is accessible at: http://${{ env.LOAD_BALANCER_URL }}"