name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: demo-cluster

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install eksctl
      run: |
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin
        eksctl version

    - name: Check if EKS Cluster exists
      id: check_cluster
      run: |
        if eksctl get cluster --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}; then
          echo "exists=true" >> $GITHUB_ENV
        else
          echo "exists=false" >> $GITHUB_ENV
        fi

    - name: Create EKS Cluster
      if: env.exists == 'false'
      run: |
        eksctl create cluster --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }} --managed

    - name: Update kubeconfig and verify connection
      run: |
        aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
        kubectl get nodes

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/requirements.txt
    
    - name: Build Docker image
      run: docker build -t dmolio/item-management-api:${{ github.sha }} .

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    
    - name: Push image to Docker Hub
      run: |
        docker push dmolio/item-management-api:${{ github.sha }}
        docker tag dmolio/item-management-api:${{ github.sha }} dmolio/item-management-api:latest
        docker push dmolio/item-management-api:latest

    - name: Update Kubernetes manifests
      run: |
        sed -i 's|dmolio/item-management-api:.*|dmolio/item-management-api:${{ github.sha }}|' k8s/manifests/deployment.yaml

    - name: Install cert-manager
      run: |
        kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.11.0/cert-manager.yaml
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/instance=cert-manager -n cert-manager --timeout=120s

    - name: Install NGINX Ingress Controller
      run: |
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.1/deploy/static/provider/aws/deploy.yaml
        kubectl wait --namespace ingress-nginx \
          --for=condition=ready pod \
          --selector=app.kubernetes.io/component=controller \
          --timeout=120s

    - name: Apply Kubernetes manifests
      run: |
        kubectl apply -f k8s/manifests/

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/item-management-api -n default

    - name: Get Ingress URL
      run: |
        INGRESS_HOST=$(kubectl get ingress item-management-api-ingress -o jsonpath='{.spec.rules[0].host}')
        echo "Your application is accessible at: https://$INGRESS_HOST"

    - name: Apply Redis manifest
      run: kubectl apply -f k8s/manifests/redis.yaml