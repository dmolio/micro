name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/requirements.txt
    
    - name: Run tests
      run: |
        cd src
        python -m unittest discover tests
    
    - name: Build Docker image
      run: docker build -t dmolio/item-management-api:${{ github.sha }} src
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    
    - name: Push image to Docker Hub
      run: |
        docker push dmolio/item-management-api:${{ github.sha }}
        docker tag dmolio/item-management-api:${{ github.sha }} dmolio/item-management-api:latest
        docker push dmolio/item-management-api:latest

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name demo-cluster --region us-east-1

    - name: Create ArgoCD namespace (if not exists)
      run: |
        if ! kubectl get namespace argocd &> /dev/null; then
          kubectl create namespace argocd
        else
          echo "Namespace argocd already exists"
        fi

    - name: Install ArgoCD (if not already installed)
      run: |
        if ! kubectl get deployment argocd-server -n argocd &> /dev/null; then
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        else
          echo "ArgoCD already installed"
        fi

    - name: Wait for ArgoCD to be ready
      run: |
        kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd

    - name: Install ArgoCD CLI
      run: |
        curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
        rm argocd-linux-amd64

    - name: Get ArgoCD admin password
      run: |
        ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
        echo "ARGOCD_PASSWORD=$ARGOCD_PASSWORD" >> $GITHUB_ENV

    - name: Port forward ArgoCD server
      run: |
        kubectl port-forward svc/argocd-server -n argocd 8080:443 &
        sleep 5

    - name: Login to ArgoCD
      run: |
        argocd login localhost:8080 --username admin --password ${{ env.ARGOCD_PASSWORD }} --insecure

    - name: Update Kubernetes manifests with new image tag
      run: |
        sed -i 's|dmolio/item-management-api:.*|dmolio/item-management-api:${{ github.sha }}|' k8s/manifests/deployment.yaml

    - name: Commit and push updated manifests
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add k8s/manifests/deployment.yaml
        git commit -m "Update image tag to ${{ github.sha }}"
        git push "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" HEAD:main

    - name: Apply ArgoCD Application
      run: |
        kubectl apply -f k8s/manifests/argocd/application.yaml

    - name: Trigger ArgoCD sync
      run: |
        argocd app sync item-management-api --timeout 300

    - name: Check ArgoCD sync status
      run: |
        for i in {1..10}; do
          sync_status=$(argocd app get item-management-api -o json | jq -r '.status.sync.status')
          health_status=$(argocd app get item-management-api -o json | jq -r '.status.health.status')
          echo "Sync Status: $sync_status, Health Status: $health_status"
          if [ "$sync_status" == "Synced" ] && [ "$health_status" == "Healthy" ]; then
            echo "Application successfully synced and healthy"
            exit 0
          fi
          sleep 30
        done
        echo "Sync did not complete in the expected time"
        argocd app get item-management-api
        exit 1

    - name: Apply Kubernetes manifests
      run: |
        kubectl apply -f k8s/manifests/
